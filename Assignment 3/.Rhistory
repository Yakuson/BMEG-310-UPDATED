print(paste("3 Prime UTR Truncation & Exon Loss: ", length(grep("3_prime_UTR_truncation & exon_loss", variants$INFO))))
print(paste("5 Prime UTR Truncation & Exon Loss Variant: ", length(grep("5_prime_UTR_truncation & exon_loss_variant", variants$INFO))))
print(paste("Coding Sequence Variant: ", length(grep("coding_sequence_variant", variants$INFO))))
print(paste("Conservative Inframe Deletion: ", length(grep("conservative_inframe_deletion", variants$INFO))))
print(paste("Conservative Inframe Insertion: ", length(grep("conservative_inframe_insertion", variants$INFO))))
print(paste("Disruptive Inframe Deletion: ", length(grep("disruptive_inframe_deletion", variants$INFO))))
print(paste("Disruptive Inframe Insertion: ", length(grep("disruptive_inframe_insertion", variants$INFO))))
print(paste("Missense Variant: ", length(grep("missense_variant", variants$INFO))))
print(paste("Regulatory Region Ablation: ", length(grep("regulatory_region_ablation", variants$INFO))))
print(paste("Splice Region Variant: ", length(grep("splice_region_variant", variants$INFO))))
print(paste("TFBS Ablation: ", length(grep("TFBS_ablation", variants$INFO))))
print(paste("5 Prime UTR Premature Start Codon Gain Variant: ", length(grep("5_prime_UTR_premature_start_codon_gain_variant", variants$INFO))))
print(paste("Initiator Codon Variant: ", length(grep("initiator_codon_variant", variants$INFO))))
print(paste("Start Retained: ", length(grep("start_retained", variants$INFO))))
print(paste("Stop Retained Variant: ", length(grep("stop_retained_variant", variants$INFO))))
print(paste("Synonymous Variant: ", length(grep("synonymous_variant", variants$INFO))))
print(paste("3 Prime UTR Variant: ", length(grep("3_prime_UTR_variant", variants$INFO))))
print(paste("5 Prime UTR Variant: ", length(grep("5_prime_UTR_variant", variants$INFO))))
print(paste("Coding Sequence Variant: ", length(grep("coding_sequence_variant", variants$INFO))))
print(paste("Conserved Intergenic Variant: ", length(grep("conserved_intergenic variant", variants$INFO))))
print(paste("Conserved Intron Variant: ", length(grep("conserved_intron_variant", variants$INFO))))
print(paste("Downstream Gene Variant: ", length(grep("downstream_gene_variant", variants$INFO))))
print(paste("Exon Variant: ", length(grep("exon_variant", variants$INFO))))
print(paste("Feature Elongation: ", length(grep("feature_elongation", variants$INFO))))
print(paste("Feature Truncation: ", length(grep("feature_truncation", variants$INFO))))
print(paste("Gene Variant: ", length(grep("gene_variant", variants$INFO))))
print(paste("Intergenic Region: ", length(grep("intergenic_variant", variants$INFO))))
print(paste("Intragenic Variant: ", length(grep("intragenic_variant", variants$INFO))))
print(paste("Intron Variant: ", length(grep("intron_variant", variants$INFO))))
print(paste("Mature miRNA Variant: ", length(grep("mature_miRNA_variant", variants$INFO))))
print(paste("miRNA: ", length(grep("miRNA", variants$INFO))))
print(paste("NMD Transcript Variant: ", length(grep("NMD_transcript_variant", variants$INFO))))
print(paste("Non-Coding Transcript Exon Variant: ", length(grep("non_coding_transcript_exon_variant", variants$INFO))))
print(paste("Non-Coding Transcript Variant: ", length(grep("non_coding_transcript_variant", variants$INFO))))
print(paste("Regulatory Region Amplification: ", length(grep("regulatory_region_amplification", variants$INFO))))
print(paste("Regulatory Region Variant: ", length(grep("regulatory_region_variant", variants$INFO))))
print(paste("TF Binding Site Variant: ", length(grep("TF_binding_site_variant", variants$INFO))))
print(paste("TFBS Amplification: ", length(grep("TFBS_amplification", variants$INFO))))
print(paste("Transcript Amplification: ", length(grep("transcript_amplification", variants$INFO))))
print(paste("Transcript Variant: ", length(grep("transcript_variant", variants$INFO))))
print(paste("Upstream Gene Variant: ", length(grep("upstream_gene_variant", variants$INFO))))
length(grep("intron",variants$INFO, value=FALSE))
HighIndices<-grep("HIGH",variants$INFO, value=FALSE)
print("The variants with HIGH impact come from genes Ddx1, Rps14, Rps19, and Hnrnpl")
library("vcfR")
#
# #AD_frequency() function test:
#
# set.seed(999)
# x1 <- round(rnorm(n=9, mean=10, sd=2))
# x2 <- round(rnorm(n=9, mean=20, sd=2))
# ad <- matrix(paste(x1, x2, sep=","), nrow=3, ncol=3)
# colnames(ad) <- paste('Sample', 1:3, sep="_")
# rownames(ad) <- paste('Variant', 1:3, sep="_")
# ad[1,1] <- "23,12"
# AD_frequency(ad, allele = 2, sum_type = 1)
#Make AD frequency matrix from split/matching AD entries in variants data frame
q310use <- unlist(mapply(function(A, B) unlist(strsplit(B, ":"))[match("AD", unlist(strsplit(A, ":")))], A=variants$FORMAT, B=variants$ws20171223_MPs_tomatoMuscle8wkQuiescent201))
q310split <- strsplit(q310use, ",")
q310alt <- as.numeric(unlist(lapply(q310split, function(s) unlist(strsplit(s, ","))[2])))
q310ref <- as.numeric(unlist(lapply(q310split, function(s) unlist(strsplit(s, ","))[1])))
q310boxplot <- q310alt / (q310ref + q310alt)
boxplot(q310boxplot, ylab = "VAF Values", main = "VAF Boxplot over all Variants")
#FIXME: Fixed issue, but before the AD_frequency function would take max(VAF, 1 - VAF) for some reason
over5percent <- which(q310boxplot > 0.05)
setwd(choose.dir())
BAMFile<-read.csv("single_cell_RNA_seq_bam.sam", nrows=73, sep="\t", header=FALSE, fill=TRUE)
print(head(BAMFile))
SNXIndex<-which(BAMFile$V2=="SN:X")
XLength=BAMFile$V3[SNXIndex]
print("The length of chromosome X is 171031299 nucleotides")
sam <- read.csv("single_cell_RNA_seq_bam.sam", sep="\t", header=FALSE, comment.char="@", col.names = paste0("V",seq_len(30)), fill=TRUE)
sam <- sam[paste0("V",seq_len(11))]
print(paste(nrow(sam)))
print("There are 146346 reads in this BAM file")
sam[10,]
count=0
for(i in 1:nrow(sam)){
if(sam$V3[i]=="X"){
count=count+1
}
}
print(paste(count,"reads align to chromosome X"))
qualityScores <- sam[which(sam$V3=="X"), 11]
#Scores <- qualityScores(filename=sam$V11,offset=33,nreads=1000)
#qualityScores <- paste0(XRows[,11])
qualityScoresUse <- paste0(qualityScores, collapse = "")
meanScore <- mean(utf8ToInt(qualityScoresUse))-33
print(paste(meanScore))
#qualityScores[1]
qual <- c()
i <- 1
for(i in 1:5999) {
qual[i] <- list(strtoi(charToRaw(qualityScores[i]),16L)-33)
}
boxplot(qual, ylim=c(10,40),col="yellow",xlab="Read Position",ylab="Base Quality", outline = FALSE )
count=0
for(i in 1:nrow(sam)){
if(sam$V3[i]==9&sam$V4[i]>=40801273&sam$V4[i]<=40805199){
count=count+1
}
}
print(paste(count,"reads have their leftmost mapping position aligned with these coordinates"))
count=0
for(i in 1:nrow(sam)){
if(sam$V5[i]<50){
count=count+1
}
}
print(paste(count, "reads have mapping quality less than 50"))
count=0
total=0
for(i in 1:nrow(sam)){
if(sam$V5[i]<50){
count=count+1
total=total+sam$V5[i]
}
}
print(paste("the mean mapping quality for reads with mapping quality less than 50 is",total/count))
count=0
for(i in 1:nrow(sam)){
if(sam$V3[i]=="tdTomato"){
count=count+1
}
}
print(paste(count,"reads align to chromosome tdTomato"))
vcf_con <- file("RNA_seq_annotated_variants.vcf", open="r")
vcf_file <- readLines(vcf_con)
close(vcf_con)
vcf <- data.frame(vcf_file)
header <- vcf[grepl("##", vcf$vcf_file), ]
factor(header)
variants <- read.csv("RNA_seq_annotated_variants.vcf", skip=length(header), header=TRUE, sep="\t")
line1string<-as.character(variants$INFO[1])
strings<-strsplit(line1string,';')
grep("ANN",strings[[1]], value=TRUE)
line1string<-as.character(variants$INFO[683])
strings<-strsplit(line1string,';')
grep("ANN",strings[[1]], value=TRUE)
print(paste("# Chromosome Number Variations:: ", length(grep("chromosome_number_variation", variants$INFO))))
print(paste("# Exon Loss Variants: ", length(grep("exon_loss_variant", variants$INFO))))
print(paste("# Frameshift Variants: ", length(grep("frameshift_variant", variants$INFO))))
print(paste("# Rare Amino Acid Variants: ", length(grep("rare_amino_acid_variant", variants$INFO))))
print(paste("# Splice Acceptor Variants: ", length(grep("splice_acceptor_variant", variants$INFO))))
print(paste("# Splice Donor Variants: ", length(grep("splice_donor_variant", variants$INFO))))
print(paste("# Start Lost: ", length(grep("start_lost", variants$INFO))))
print(paste("# Stop Gained: ", length(grep("stop_gained", variants$INFO))))
print(paste("# Stop Lost: ", length(grep("stop_lost", variants$INFO))))
print(paste("# Transcript Ablation: ", length(grep("transcript_ablation", variants$INFO))))
print(paste("3 Prime UTR Truncation & Exon Loss: ", length(grep("3_prime_UTR_truncation & exon_loss", variants$INFO))))
print(paste("5 Prime UTR Truncation & Exon Loss Variant: ", length(grep("5_prime_UTR_truncation & exon_loss_variant", variants$INFO))))
print(paste("Coding Sequence Variant: ", length(grep("coding_sequence_variant", variants$INFO))))
print(paste("Conservative Inframe Deletion: ", length(grep("conservative_inframe_deletion", variants$INFO))))
print(paste("Conservative Inframe Insertion: ", length(grep("conservative_inframe_insertion", variants$INFO))))
print(paste("Disruptive Inframe Deletion: ", length(grep("disruptive_inframe_deletion", variants$INFO))))
print(paste("Disruptive Inframe Insertion: ", length(grep("disruptive_inframe_insertion", variants$INFO))))
print(paste("Missense Variant: ", length(grep("missense_variant", variants$INFO))))
print(paste("Regulatory Region Ablation: ", length(grep("regulatory_region_ablation", variants$INFO))))
print(paste("Splice Region Variant: ", length(grep("splice_region_variant", variants$INFO))))
print(paste("TFBS Ablation: ", length(grep("TFBS_ablation", variants$INFO))))
print(paste("5 Prime UTR Premature Start Codon Gain Variant: ", length(grep("5_prime_UTR_premature_start_codon_gain_variant", variants$INFO))))
print(paste("Initiator Codon Variant: ", length(grep("initiator_codon_variant", variants$INFO))))
print(paste("Start Retained: ", length(grep("start_retained", variants$INFO))))
print(paste("Stop Retained Variant: ", length(grep("stop_retained_variant", variants$INFO))))
print(paste("Synonymous Variant: ", length(grep("synonymous_variant", variants$INFO))))
print(paste("3 Prime UTR Variant: ", length(grep("3_prime_UTR_variant", variants$INFO))))
print(paste("5 Prime UTR Variant: ", length(grep("5_prime_UTR_variant", variants$INFO))))
print(paste("Coding Sequence Variant: ", length(grep("coding_sequence_variant", variants$INFO))))
print(paste("Conserved Intergenic Variant: ", length(grep("conserved_intergenic variant", variants$INFO))))
print(paste("Conserved Intron Variant: ", length(grep("conserved_intron_variant", variants$INFO))))
print(paste("Downstream Gene Variant: ", length(grep("downstream_gene_variant", variants$INFO))))
print(paste("Exon Variant: ", length(grep("exon_variant", variants$INFO))))
print(paste("Feature Elongation: ", length(grep("feature_elongation", variants$INFO))))
print(paste("Feature Truncation: ", length(grep("feature_truncation", variants$INFO))))
print(paste("Gene Variant: ", length(grep("gene_variant", variants$INFO))))
print(paste("Intergenic Region: ", length(grep("intergenic_variant", variants$INFO))))
print(paste("Intragenic Variant: ", length(grep("intragenic_variant", variants$INFO))))
print(paste("Intron Variant: ", length(grep("intron_variant", variants$INFO))))
print(paste("Mature miRNA Variant: ", length(grep("mature_miRNA_variant", variants$INFO))))
print(paste("miRNA: ", length(grep("miRNA", variants$INFO))))
print(paste("NMD Transcript Variant: ", length(grep("NMD_transcript_variant", variants$INFO))))
print(paste("Non-Coding Transcript Exon Variant: ", length(grep("non_coding_transcript_exon_variant", variants$INFO))))
print(paste("Non-Coding Transcript Variant: ", length(grep("non_coding_transcript_variant", variants$INFO))))
print(paste("Regulatory Region Amplification: ", length(grep("regulatory_region_amplification", variants$INFO))))
print(paste("Regulatory Region Variant: ", length(grep("regulatory_region_variant", variants$INFO))))
print(paste("TF Binding Site Variant: ", length(grep("TF_binding_site_variant", variants$INFO))))
print(paste("TFBS Amplification: ", length(grep("TFBS_amplification", variants$INFO))))
print(paste("Transcript Amplification: ", length(grep("transcript_amplification", variants$INFO))))
print(paste("Transcript Variant: ", length(grep("transcript_variant", variants$INFO))))
print(paste("Upstream Gene Variant: ", length(grep("upstream_gene_variant", variants$INFO))))
length(grep("intron",variants$INFO, value=FALSE))
HighIndices<-grep("HIGH",variants$INFO, value=FALSE)
print("The variants with HIGH impact come from genes Ddx1, Rps14, Rps19, and Hnrnpl")
#library("vcfR")
#
# #AD_frequency() function test:
#
# set.seed(999)
# x1 <- round(rnorm(n=9, mean=10, sd=2))
# x2 <- round(rnorm(n=9, mean=20, sd=2))
# ad <- matrix(paste(x1, x2, sep=","), nrow=3, ncol=3)
# colnames(ad) <- paste('Sample', 1:3, sep="_")
# rownames(ad) <- paste('Variant', 1:3, sep="_")
# ad[1,1] <- "23,12"
# AD_frequency(ad, allele = 2, sum_type = 1)
#Make AD frequency matrix from split/matching AD entries in variants data frame
q310use <- unlist(mapply(function(A, B) unlist(strsplit(B, ":"))[match("AD", unlist(strsplit(A, ":")))], A=variants$FORMAT, B=variants$ws20171223_MPs_tomatoMuscle8wkQuiescent201))
q310split <- strsplit(q310use, ",")
q310alt <- as.numeric(unlist(lapply(q310split, function(s) unlist(strsplit(s, ","))[2])))
q310ref <- as.numeric(unlist(lapply(q310split, function(s) unlist(strsplit(s, ","))[1])))
q310boxplot <- q310alt / (q310ref + q310alt)
boxplot(q310boxplot, ylab = "VAF Values", main = "VAF Boxplot over all Variants")
#FIXME: Fixed issue, but before the AD_frequency function would take max(VAF, 1 - VAF) for some reason
over5percent <- which(q310boxplot > 0.05)
#setwd(choose.dir())
BAMFile<-read.csv("single_cell_RNA_seq_bam.sam", nrows=73, sep="\t", header=FALSE, fill=TRUE)
print(head(BAMFile))
SNXIndex<-which(BAMFile$V2=="SN:X")
XLength=BAMFile$V3[SNXIndex]
print("The length of chromosome X is 171031299 nucleotides")
sam <- read.csv("single_cell_RNA_seq_bam.sam", sep="\t", header=FALSE, comment.char="@", col.names = paste0("V",seq_len(30)), fill=TRUE)
sam <- sam[paste0("V",seq_len(11))]
print(paste(nrow(sam)))
print("There are 146346 reads in this BAM file")
sam[10,]
count=0
for(i in 1:nrow(sam)){
if(sam$V3[i]=="X"){
count=count+1
}
}
print(paste(count,"reads align to chromosome X"))
qualityScores <- sam[which(sam$V3=="X"), 11]
#Scores <- qualityScores(filename=sam$V11,offset=33,nreads=1000)
#qualityScores <- paste0(XRows[,11])
qualityScoresUse <- paste0(qualityScores, collapse = "")
meanScore <- mean(utf8ToInt(qualityScoresUse))-33
print(paste(meanScore))
#qualityScores[1]
qual <- c()
i <- 1
for(i in 1:5999) {
qual[i] <- list(strtoi(charToRaw(qualityScores[i]),16L)-33)
}
boxplot(qual, ylim=c(10,40),col="yellow",xlab="Read Position",ylab="Base Quality", outline = FALSE )
count=0
for(i in 1:nrow(sam)){
if(sam$V3[i]==9&sam$V4[i]>=40801273&sam$V4[i]<=40805199){
count=count+1
}
}
print(paste(count,"reads have their leftmost mapping position aligned with these coordinates"))
count=0
for(i in 1:nrow(sam)){
if(sam$V5[i]<50){
count=count+1
}
}
print(paste(count, "reads have mapping quality less than 50"))
count=0
total=0
for(i in 1:nrow(sam)){
if(sam$V5[i]<50){
count=count+1
total=total+sam$V5[i]
}
}
print(paste("the mean mapping quality for reads with mapping quality less than 50 is",total/count))
count=0
for(i in 1:nrow(sam)){
if(sam$V3[i]=="tdTomato"){
count=count+1
}
}
print(paste(count,"reads align to chromosome tdTomato"))
vcf_con <- file("RNA_seq_annotated_variants.vcf", open="r")
vcf_file <- readLines(vcf_con)
close(vcf_con)
vcf <- data.frame(vcf_file)
header <- vcf[grepl("##", vcf$vcf_file), ]
factor(header)
variants <- read.csv("RNA_seq_annotated_variants.vcf", skip=length(header), header=TRUE, sep="\t")
line1string<-as.character(variants$INFO[1])
strings<-strsplit(line1string,';')
grep("ANN",strings[[1]], value=TRUE)
line1string<-as.character(variants$INFO[683])
strings<-strsplit(line1string,';')
grep("ANN",strings[[1]], value=TRUE)
print(paste("# Chromosome Number Variations:: ", length(grep("chromosome_number_variation", variants$INFO))))
print(paste("# Exon Loss Variants: ", length(grep("exon_loss_variant", variants$INFO))))
print(paste("# Frameshift Variants: ", length(grep("frameshift_variant", variants$INFO))))
print(paste("# Rare Amino Acid Variants: ", length(grep("rare_amino_acid_variant", variants$INFO))))
print(paste("# Splice Acceptor Variants: ", length(grep("splice_acceptor_variant", variants$INFO))))
print(paste("# Splice Donor Variants: ", length(grep("splice_donor_variant", variants$INFO))))
print(paste("# Start Lost: ", length(grep("start_lost", variants$INFO))))
print(paste("# Stop Gained: ", length(grep("stop_gained", variants$INFO))))
print(paste("# Stop Lost: ", length(grep("stop_lost", variants$INFO))))
print(paste("# Transcript Ablation: ", length(grep("transcript_ablation", variants$INFO))))
print(paste("3 Prime UTR Truncation & Exon Loss: ", length(grep("3_prime_UTR_truncation & exon_loss", variants$INFO))))
print(paste("5 Prime UTR Truncation & Exon Loss Variant: ", length(grep("5_prime_UTR_truncation & exon_loss_variant", variants$INFO))))
print(paste("Coding Sequence Variant: ", length(grep("coding_sequence_variant", variants$INFO))))
print(paste("Conservative Inframe Deletion: ", length(grep("conservative_inframe_deletion", variants$INFO))))
print(paste("Conservative Inframe Insertion: ", length(grep("conservative_inframe_insertion", variants$INFO))))
print(paste("Disruptive Inframe Deletion: ", length(grep("disruptive_inframe_deletion", variants$INFO))))
print(paste("Disruptive Inframe Insertion: ", length(grep("disruptive_inframe_insertion", variants$INFO))))
print(paste("Missense Variant: ", length(grep("missense_variant", variants$INFO))))
print(paste("Regulatory Region Ablation: ", length(grep("regulatory_region_ablation", variants$INFO))))
print(paste("Splice Region Variant: ", length(grep("splice_region_variant", variants$INFO))))
print(paste("TFBS Ablation: ", length(grep("TFBS_ablation", variants$INFO))))
print(paste("5 Prime UTR Premature Start Codon Gain Variant: ", length(grep("5_prime_UTR_premature_start_codon_gain_variant", variants$INFO))))
print(paste("Initiator Codon Variant: ", length(grep("initiator_codon_variant", variants$INFO))))
print(paste("Start Retained: ", length(grep("start_retained", variants$INFO))))
print(paste("Stop Retained Variant: ", length(grep("stop_retained_variant", variants$INFO))))
print(paste("Synonymous Variant: ", length(grep("synonymous_variant", variants$INFO))))
print(paste("3 Prime UTR Variant: ", length(grep("3_prime_UTR_variant", variants$INFO))))
print(paste("5 Prime UTR Variant: ", length(grep("5_prime_UTR_variant", variants$INFO))))
print(paste("Coding Sequence Variant: ", length(grep("coding_sequence_variant", variants$INFO))))
print(paste("Conserved Intergenic Variant: ", length(grep("conserved_intergenic variant", variants$INFO))))
print(paste("Conserved Intron Variant: ", length(grep("conserved_intron_variant", variants$INFO))))
print(paste("Downstream Gene Variant: ", length(grep("downstream_gene_variant", variants$INFO))))
print(paste("Exon Variant: ", length(grep("exon_variant", variants$INFO))))
print(paste("Feature Elongation: ", length(grep("feature_elongation", variants$INFO))))
print(paste("Feature Truncation: ", length(grep("feature_truncation", variants$INFO))))
print(paste("Gene Variant: ", length(grep("gene_variant", variants$INFO))))
print(paste("Intergenic Region: ", length(grep("intergenic_variant", variants$INFO))))
print(paste("Intragenic Variant: ", length(grep("intragenic_variant", variants$INFO))))
print(paste("Intron Variant: ", length(grep("intron_variant", variants$INFO))))
print(paste("Mature miRNA Variant: ", length(grep("mature_miRNA_variant", variants$INFO))))
print(paste("miRNA: ", length(grep("miRNA", variants$INFO))))
print(paste("NMD Transcript Variant: ", length(grep("NMD_transcript_variant", variants$INFO))))
print(paste("Non-Coding Transcript Exon Variant: ", length(grep("non_coding_transcript_exon_variant", variants$INFO))))
print(paste("Non-Coding Transcript Variant: ", length(grep("non_coding_transcript_variant", variants$INFO))))
print(paste("Regulatory Region Amplification: ", length(grep("regulatory_region_amplification", variants$INFO))))
print(paste("Regulatory Region Variant: ", length(grep("regulatory_region_variant", variants$INFO))))
print(paste("TF Binding Site Variant: ", length(grep("TF_binding_site_variant", variants$INFO))))
print(paste("TFBS Amplification: ", length(grep("TFBS_amplification", variants$INFO))))
print(paste("Transcript Amplification: ", length(grep("transcript_amplification", variants$INFO))))
print(paste("Transcript Variant: ", length(grep("transcript_variant", variants$INFO))))
print(paste("Upstream Gene Variant: ", length(grep("upstream_gene_variant", variants$INFO))))
length(grep("intron",variants$INFO, value=FALSE))
HighIndices<-grep("HIGH",variants$INFO, value=FALSE)
print("The variants with HIGH impact come from genes Ddx1, Rps14, Rps19, and Hnrnpl")
#library("vcfR")
#
# #AD_frequency() function test:
#
# set.seed(999)
# x1 <- round(rnorm(n=9, mean=10, sd=2))
# x2 <- round(rnorm(n=9, mean=20, sd=2))
# ad <- matrix(paste(x1, x2, sep=","), nrow=3, ncol=3)
# colnames(ad) <- paste('Sample', 1:3, sep="_")
# rownames(ad) <- paste('Variant', 1:3, sep="_")
# ad[1,1] <- "23,12"
# AD_frequency(ad, allele = 2, sum_type = 1)
#Make AD frequency matrix from split/matching AD entries in variants data frame
q310use <- unlist(mapply(function(A, B) unlist(strsplit(B, ":"))[match("AD", unlist(strsplit(A, ":")))], A=variants$FORMAT, B=variants$ws20171223_MPs_tomatoMuscle8wkQuiescent201))
q310split <- strsplit(q310use, ",")
q310alt <- as.numeric(unlist(lapply(q310split, function(s) unlist(strsplit(s, ","))[2])))
q310ref <- as.numeric(unlist(lapply(q310split, function(s) unlist(strsplit(s, ","))[1])))
q310boxplot <- q310alt / (q310ref + q310alt)
boxplot(q310boxplot, ylab = "VAF Values", main = "VAF Boxplot over all Variants")
#FIXME: Fixed issue, but before the AD_frequency function would take max(VAF, 1 - VAF) for some reason
over5percent <- which(q310boxplot > 0.05)
#setwd(choose.dir())
BAMFile<-read.csv("single_cell_RNA_seq_bam.sam", nrows=73, sep="\t", header=FALSE, fill=TRUE)
print(BAMFile)
SNXIndex<-which(BAMFile$V2=="SN:X")
XLength=BAMFile$V3[SNXIndex]
print("The length of chromosome X is 171031299 nucleotides")
sam <- read.csv("single_cell_RNA_seq_bam.sam", sep="\t", header=FALSE, comment.char="@", col.names = paste0("V",seq_len(30)), fill=TRUE)
sam <- sam[paste0("V",seq_len(11))]
print(paste(nrow(sam)))
print("There are 146346 reads in this BAM file")
sam[10,]
count=0
for(i in 1:nrow(sam)){
if(sam$V3[i]=="X"){
count=count+1
}
}
print(paste(count,"reads align to chromosome X"))
qualityScores <- sam[which(sam$V3=="X"), 11]
#Scores <- qualityScores(filename=sam$V11,offset=33,nreads=1000)
#qualityScores <- paste0(XRows[,11])
qualityScoresUse <- paste0(qualityScores, collapse = "")
meanScore <- mean(utf8ToInt(qualityScoresUse))-33
print(paste(meanScore))
#qualityScores[1]
qual <- c()
i <- 1
for(i in 1:5999) {
qual[i] <- list(strtoi(charToRaw(qualityScores[i]),16L)-33)
}
boxplot(qual, ylim=c(10,40),col="yellow",xlab="Read Position",ylab="Base Quality", outline = FALSE )
count=0
for(i in 1:nrow(sam)){
if(sam$V3[i]==9&sam$V4[i]>=40801273&sam$V4[i]<=40805199){
count=count+1
}
}
print(paste(count,"reads have their leftmost mapping position aligned with these coordinates"))
count=0
for(i in 1:nrow(sam)){
if(sam$V5[i]<50){
count=count+1
}
}
print(paste(count, "reads have mapping quality less than 50"))
count=0
total=0
for(i in 1:nrow(sam)){
if(sam$V5[i]<50){
count=count+1
total=total+sam$V5[i]
}
}
print(paste("the mean mapping quality for reads with mapping quality less than 50 is",total/count))
count=0
for(i in 1:nrow(sam)){
if(sam$V3[i]=="tdTomato"){
count=count+1
}
}
print(paste(count,"reads align to chromosome tdTomato"))
vcf_con <- file("RNA_seq_annotated_variants.vcf", open="r")
vcf_file <- readLines(vcf_con)
close(vcf_con)
vcf <- data.frame(vcf_file)
header <- vcf[grepl("##", vcf$vcf_file), ]
factor(header)
variants <- read.csv("RNA_seq_annotated_variants.vcf", skip=length(header), header=TRUE, sep="\t")
line1string<-as.character(variants$INFO[1])
strings<-strsplit(line1string,';')
grep("ANN",strings[[1]], value=TRUE)
line1string<-as.character(variants$INFO[683])
strings<-strsplit(line1string,';')
grep("ANN",strings[[1]], value=TRUE)
print(paste("# Chromosome Number Variations:: ", length(grep("chromosome_number_variation", variants$INFO))))
print(paste("# Exon Loss Variants: ", length(grep("exon_loss_variant", variants$INFO))))
print(paste("# Frameshift Variants: ", length(grep("frameshift_variant", variants$INFO))))
print(paste("# Rare Amino Acid Variants: ", length(grep("rare_amino_acid_variant", variants$INFO))))
print(paste("# Splice Acceptor Variants: ", length(grep("splice_acceptor_variant", variants$INFO))))
print(paste("# Splice Donor Variants: ", length(grep("splice_donor_variant", variants$INFO))))
print(paste("# Start Lost: ", length(grep("start_lost", variants$INFO))))
print(paste("# Stop Gained: ", length(grep("stop_gained", variants$INFO))))
print(paste("# Stop Lost: ", length(grep("stop_lost", variants$INFO))))
print(paste("# Transcript Ablation: ", length(grep("transcript_ablation", variants$INFO))))
print(paste("3 Prime UTR Truncation & Exon Loss: ", length(grep("3_prime_UTR_truncation & exon_loss", variants$INFO))))
print(paste("5 Prime UTR Truncation & Exon Loss Variant: ", length(grep("5_prime_UTR_truncation & exon_loss_variant", variants$INFO))))
print(paste("Coding Sequence Variant: ", length(grep("coding_sequence_variant", variants$INFO))))
print(paste("Conservative Inframe Deletion: ", length(grep("conservative_inframe_deletion", variants$INFO))))
print(paste("Conservative Inframe Insertion: ", length(grep("conservative_inframe_insertion", variants$INFO))))
print(paste("Disruptive Inframe Deletion: ", length(grep("disruptive_inframe_deletion", variants$INFO))))
print(paste("Disruptive Inframe Insertion: ", length(grep("disruptive_inframe_insertion", variants$INFO))))
print(paste("Missense Variant: ", length(grep("missense_variant", variants$INFO))))
print(paste("Regulatory Region Ablation: ", length(grep("regulatory_region_ablation", variants$INFO))))
print(paste("Splice Region Variant: ", length(grep("splice_region_variant", variants$INFO))))
print(paste("TFBS Ablation: ", length(grep("TFBS_ablation", variants$INFO))))
print(paste("5 Prime UTR Premature Start Codon Gain Variant: ", length(grep("5_prime_UTR_premature_start_codon_gain_variant", variants$INFO))))
print(paste("Initiator Codon Variant: ", length(grep("initiator_codon_variant", variants$INFO))))
print(paste("Start Retained: ", length(grep("start_retained", variants$INFO))))
print(paste("Stop Retained Variant: ", length(grep("stop_retained_variant", variants$INFO))))
print(paste("Synonymous Variant: ", length(grep("synonymous_variant", variants$INFO))))
print(paste("3 Prime UTR Variant: ", length(grep("3_prime_UTR_variant", variants$INFO))))
print(paste("5 Prime UTR Variant: ", length(grep("5_prime_UTR_variant", variants$INFO))))
print(paste("Coding Sequence Variant: ", length(grep("coding_sequence_variant", variants$INFO))))
print(paste("Conserved Intergenic Variant: ", length(grep("conserved_intergenic variant", variants$INFO))))
print(paste("Conserved Intron Variant: ", length(grep("conserved_intron_variant", variants$INFO))))
print(paste("Downstream Gene Variant: ", length(grep("downstream_gene_variant", variants$INFO))))
print(paste("Exon Variant: ", length(grep("exon_variant", variants$INFO))))
print(paste("Feature Elongation: ", length(grep("feature_elongation", variants$INFO))))
print(paste("Feature Truncation: ", length(grep("feature_truncation", variants$INFO))))
print(paste("Gene Variant: ", length(grep("gene_variant", variants$INFO))))
print(paste("Intergenic Region: ", length(grep("intergenic_variant", variants$INFO))))
print(paste("Intragenic Variant: ", length(grep("intragenic_variant", variants$INFO))))
print(paste("Intron Variant: ", length(grep("intron_variant", variants$INFO))))
print(paste("Mature miRNA Variant: ", length(grep("mature_miRNA_variant", variants$INFO))))
print(paste("miRNA: ", length(grep("miRNA", variants$INFO))))
print(paste("NMD Transcript Variant: ", length(grep("NMD_transcript_variant", variants$INFO))))
print(paste("Non-Coding Transcript Exon Variant: ", length(grep("non_coding_transcript_exon_variant", variants$INFO))))
print(paste("Non-Coding Transcript Variant: ", length(grep("non_coding_transcript_variant", variants$INFO))))
print(paste("Regulatory Region Amplification: ", length(grep("regulatory_region_amplification", variants$INFO))))
print(paste("Regulatory Region Variant: ", length(grep("regulatory_region_variant", variants$INFO))))
print(paste("TF Binding Site Variant: ", length(grep("TF_binding_site_variant", variants$INFO))))
print(paste("TFBS Amplification: ", length(grep("TFBS_amplification", variants$INFO))))
print(paste("Transcript Amplification: ", length(grep("transcript_amplification", variants$INFO))))
print(paste("Transcript Variant: ", length(grep("transcript_variant", variants$INFO))))
print(paste("Upstream Gene Variant: ", length(grep("upstream_gene_variant", variants$INFO))))
length(grep("intron",variants$INFO, value=FALSE))
HighIndices<-grep("HIGH",variants$INFO, value=FALSE)
print("The variants with HIGH impact come from genes Ddx1, Rps14, Rps19, and Hnrnpl")
library("vcfR")
#
# #AD_frequency() function test:
#
# set.seed(999)
# x1 <- round(rnorm(n=9, mean=10, sd=2))
# x2 <- round(rnorm(n=9, mean=20, sd=2))
# ad <- matrix(paste(x1, x2, sep=","), nrow=3, ncol=3)
# colnames(ad) <- paste('Sample', 1:3, sep="_")
# rownames(ad) <- paste('Variant', 1:3, sep="_")
# ad[1,1] <- "23,12"
# AD_frequency(ad, allele = 2, sum_type = 1)
#Make AD frequency matrix from split/matching AD entries in variants data frame
q310use <- unlist(mapply(function(A, B) unlist(strsplit(B, ":"))[match("AD", unlist(strsplit(A, ":")))], A=variants$FORMAT, B=variants$ws20171223_MPs_tomatoMuscle8wkQuiescent201))
q310split <- strsplit(q310use, ",")
q310alt <- as.numeric(unlist(lapply(q310split, function(s) unlist(strsplit(s, ","))[2])))
q310ref <- as.numeric(unlist(lapply(q310split, function(s) unlist(strsplit(s, ","))[1])))
q310boxplot <- q310alt / (q310ref + q310alt)
boxplot(q310boxplot, ylab = "VAF Values", main = "VAF Boxplot over all Variants")
#FIXME: Fixed issue, but before the AD_frequency function would take max(VAF, 1 - VAF) for some reason
over5percent <- which(q310boxplot > 0.05)
